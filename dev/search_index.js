var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [DataLinter, DataLinter.LinterCore, DataLinter.Configuration, DataLinter.DataInterface, DataLinter.KnowledgeBaseInterface, DataLinter.OutputInterface]","category":"page"},{"location":"api/#DataLinter.DataLinter","page":"API Reference","title":"DataLinter.DataLinter","text":"A data linter developed at the Vrije Universiteit Brussel, 2024.\n\nI. Architecture (dataflow diagram):\n\n                                        .---------------.\n       (knowledge) -------------------->|  KB INTERFACE |\n                                        '---------------'\n                                                 ^\n                                                (3)\n                                                 v\n                  .----------------.        .---------.        .-----------------.\n       (data) --> | DATA INTERFACE | -(1)-> | LINTER  | -(4)-> |OUTPUT INTERFACE | --> (output)\n                  '----------------'        '---------'        '-----------------'\n                                                 ^\n       (config) --------------(2)----------------'\n\nII. Functional components:\n\n• KB INTERFACE (`src/kb*.jl`)\n  - handles communication with the knowledgebase\n  Note: at this point the knowledge i.e. the data linters, is embedded in code\n\n• DATA INTERFACE (`src/data.jl`)\n  - models types of 'data contexts' = 'data' + 'metadata' + 'information' over where/when the data exists\n     (i.e. a context could contain data and the snippet of code which is executed over the data)\n  - the 'context' contributes as well to how/which linters are applied to the data\n\n• OUTPUT INTERFACE (`src/output.jl`)\n  - contains all code related to exporting or printing linting output and displaying statistics\n\n• LINTER (`src/linter.jl`)\n  - functional core of the system\n  - it is a loop over linters × variables that applies each linter to variables/sets of variables\n    (depending on context) and generates results\n\nIII. Inputs and outputs:\n\n• data\n  - at this point only '.CSV' files are supported\n  - the internal representation supports the `Tables` interface\n\n• config\n  - keeps configuration of the linter\n  - should be self explanatory '.TOML' file\n  - option names for linter parameters are also keyword argument names in the code\n\n• knowledge\n  - knowledge relevant for the functioning of the data linter\n  - currently all knowledge is present in `src/kb*.jl` in the form of data structures and\n    throughout the code as functions\n    Note: this will change over time\n\n• output\n  - what the user receives from the linter\n\nIV. Internal data transfer objects (DTOs):\n\n• (1) - data context object i.e. data, data + code;\n• (2) - linter configuration information\n• (3) - knowledge i.e. linters, applicability conditions etc.\n• (4) - linting output i.e. linters/context, output, data stats etc.\n\n\n\n\n\n","category":"module"},{"location":"api/#DataLinter.cli_linting_workflow-Tuple{Any, Any, Any}","page":"API Reference","title":"DataLinter.cli_linting_workflow","text":"Basic flow for running the linter in a command line interface environment such as a Unix shell.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.printable_version-Tuple{}","page":"API Reference","title":"DataLinter.printable_version","text":"printable_version()\n\nReturns a pretty version string that includes the git commit and date.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.version-Tuple{}","page":"API Reference","title":"DataLinter.version","text":"version()\n\nReturns the current DataLinter version using the Project.toml and git. If the Project.toml, git are not available, the version defaults to an empty string.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.LinterCore.lint-Tuple{DataLinter.LinterCore.AbstractDataContext, Union{Nothing, DataLinter.LinterCore.AbstractKnowledgeBase}}","page":"API Reference","title":"DataLinter.LinterCore.lint","text":"lint(ctx::AbstractDataContext, kb::Union{Nothing, AbstractKnowledgeBase}; config=nothing, debug=false)\n\nMain linting function. Lints the data provided by ctx using knowledge from kb. A configuration for the available linters can be provided in config. If debug=true, performance information for each linter are shown.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.LinterCore.get_linter_kwargs-Tuple{Nothing, Any}","page":"API Reference","title":"DataLinter.LinterCore.get_linter_kwargs","text":"Function that reads linter configuration parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.LinterCore.linter_is_enabled-Tuple{Nothing, Any}","page":"API Reference","title":"DataLinter.LinterCore.linter_is_enabled","text":"Function that returns whether a linter is enabled in the config or not.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.LinterCore.load_config-Tuple{Nothing}","page":"API Reference","title":"DataLinter.LinterCore.load_config","text":"load_config(configpath::AbstractString)\n\nLoads a linting configuration file located at configpath. The configuration file contains options regarding which linters are enabled and linter parameter values.\n\nExamples\n\njulia> using DataLinter\n       using Pkg\n        configpath = joinpath(dirname((Pkg.project()).path), \"config\", \"default.toml\")\n       DataLinter.LinterCore.load_config(configpath)\nDict{String, Any} with 2 entries:\n  \"parameters\" => Dict{String, Any}(\"uncommon_signs\"=>Dict{String, Any}(), \"enum_detector\"=>Dict{String, Any}(\"distinct_max_limit\"=>5, \"distinct_ratio\"=>0.001), \"empty_example\"=>Dict{String, Any}(), \"negative_…\n  \"linters\"    => Dict{String, Any}(\"uncommon_signs\"=>true, \"enum_detector\"=>true, \"empty_example\"=>true, \"negative_values\"=>true, \"tokenizable_string\"=>true, \"number_as_string\"=>true, \"int_as_float\"=>true, \"l…\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.DataInterface.build_data_context-Tuple{}","page":"API Reference","title":"DataLinter.DataInterface.build_data_context","text":"build_data_context(;data=nothing, code=nothing)\n\nBuilds a data context object using data and code if available. The data context represents a context in which the linter runs: the data it lints and optionally, the code associated to the data i.e. some algorithm that will be applied on that data.\n\nExamples\n\njulia> using DataLinter\n       ncols, nrows = 3, 10\n       data = [rand(nrows) for _ in 1:ncols]\n       ctx = DataLinter.build_data_context(data)\nSimpleDataContext 0.00040435791015625 MB of data\n\njulia> kb = DataLinter.kb_load(\"\")\n       DataLinter.LinterCore.lint(ctx, kb)\n38-element Vector{Pair{Tuple{DataLinter.LinterCore.Linter, String}, Union{Nothing, Bool}}}:\n         (Linter (name=datetime_as_string, f=is_datetime_as_string), \"column: x2\") => nothing\n         (Linter (name=datetime_as_string, f=is_datetime_as_string), \"column: x3\") => nothing\n         (Linter (name=datetime_as_string, f=is_datetime_as_string), \"column: x1\") => nothing\n         (Linter (name=tokenizable_string, f=is_tokenizable_string), \"column: x2\") => nothing\n         ...\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.LinterCore.build_data_iterator-Tuple{Tables.Columns}","page":"API Reference","title":"DataLinter.LinterCore.build_data_iterator","text":"Function that returns a DataStructure ammendable for use in the data linters. It contains a row iterator, a column iterator, metadata\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.KnowledgeBaseInterface.kb_load-Tuple{String}","page":"API Reference","title":"DataLinter.KnowledgeBaseInterface.kb_load","text":"kb_load(filepath::String)\n\nLoads a Knowledge Base file located at filepath. The loaded knowledge is used by the lint function to drive the linting.\n\nExamples\n\njulia> using DataLinter\njulia> using TOML\n\njulia> data = Dict(\"a\"=>1)\njulia> mktemp() do kbpath, io\n           TOML.print(io, data)   # write data\n           flush(io);             # and flush to disk\n           kb = kb_load(kbpath);  # load data with `kb_load`\n           kb.data.data           # return loaded data\n       end\nDict{String, Any} with 1 entry:\n  \"a\" => 1\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.LinterCore.process_output-Tuple{Any}","page":"API Reference","title":"DataLinter.LinterCore.process_output","text":"process_output(lintout; buffer=stdout, show_stats=false, show_passing=false, show_na=false)\n\nProcess linting output for display. The function takes the linter output lintout and prints lints to buffer. If show_stats, show_passing and show_na are set to true, the function will print statistics over the checks, the checks that passes and the ones that could not be applied respectively.\n\n\n\n\n\n","category":"method"},{"location":"examples/#Usage-examples","page":"Usage examples","title":"Usage examples","text":"","category":"section"},{"location":"examples/#A-simple-tutorial","page":"Usage examples","title":"A simple tutorial","text":"","category":"section"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"First, generate some random data:","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"using DataLinter\n\nncols, nrows = 3, 10\ndata = [rand(nrows) for _ in 1:ncols]","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"then, generate a context object:","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"ctx = DataLinter.build_data_context(data)","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"Context objects are the main linter inputs along with a knowledge base and the config.","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"note: Note\nAt this point the knowledge base is not used.","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"kb = DataLinter.kb_load(\"\")         # raises Warning\nlintout = DataLinter.LinterCore.lint(ctx, kb)\nlintout = DataLinter.LinterCore.lint(ctx, nothing)  # also works","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"Lastly, one can print output of activate linters i.e. the ones that found problems in the data.","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"DataLinter.process_output(lintout)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"CurrentModule=DataLinter","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"DataLinter is a package for linting datasets. Currently, it is based almost entirely on Google's data linter project. We aim for a redesign that aims at a richer and faster experience.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Installation can be performed from either inside or outside Julia.","category":"page"},{"location":"#Docker-image-(recommended)","page":"Introduction","title":"Docker image (recommended)","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"$ docker pull ghcr.io/zgornel/datalinter-compiled:latest","category":"page"},{"location":"#Git-cloning","page":"Introduction","title":"Git cloning","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The DataLinter repository can be downloaded through git:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"$ git clone https://github.com/zgornel/DataLinter","category":"page"}]
}
