var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api/#DataLinter.DataLinter","page":"API Reference","title":"DataLinter.DataLinter","text":"A data linter developed at the Vrije Universiteit Brussel, 2024.\n\nI. Architecture (dataflow diagram):\n\n                                        .---------------.\n       (knowledge) -------------------->|  KB INTERFACE |\n                                        '---------------'\n                                                 ^\n                                                (3)\n                                                 v\n                  .----------------.        .---------.        .-----------------.\n       (data) --> | DATA INTERFACE | -(1)-> | LINTER  | -(4)-> |OUTPUT INTERFACE | --> (output)\n                  '----------------'        '---------'        '-----------------'\n                                                 ^\n       (config) --------------(2)----------------'\n\nII. Functional components:\n\n• KB INTERFACE (`src/kb*.jl`)\n  - handles communication with the knowledgebase\n  Note: at this point the knowledge i.e. the data linters, is embedded in code\n\n• DATA INTERFACE (`src/data.jl`)\n  - models types of 'data contexts' = 'data' + 'metadata' + 'information' over where/when the data exists\n     (i.e. a context could contain data and the snippet of code which is executed over the data)\n  - the 'context' contributes as well to how/which linters are applied to the data\n\n• OUTPUT INTERFACE (`src/output.jl`)\n  - contains all code related to exporting or printing linting output and displaying statistics\n\n• LINTER (`src/linter.jl`)\n  - functional core of the system\n  - it is a loop over linters × variables that applies each linter to variables/sets of variables\n    (depending on context) and generates results\n\nIII. Inputs and outputs:\n\n• data\n  - at this point only '.CSV' files are supported\n  - the internal representation supports the `Tables` interface\n\n• config\n  - keeps configuration of the linter\n  - should be self explanatory '.TOML' file\n  - option names for linter parameters are also keyword argument names in the code\n\n• knowledge\n  - knowledge relevant for the functioning of the data linter\n  - currently all knowledge is present in `src/kb*.jl` in the form of data structures and\n    throughout the code as functions\n    Note: this will change over time\n\n• output\n  - what the user receives from the linter\n\nIV. Internal data transfer objects (DTOs):\n\n• (1) - data context object i.e. data, data + code;\n• (2) - linter configuration information\n• (3) - knowledge i.e. linters, applicability conditions etc.\n• (4) - linting output i.e. linters/context, output, data stats etc.\n\n\n\n\n\n","category":"module"},{"location":"api/#DataLinter.cli_linting_workflow-Tuple{Any, Any, Any}","page":"API Reference","title":"DataLinter.cli_linting_workflow","text":"Basic flow for running the linter in a command line interface environment such as a Unix shell.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.printable_version-Tuple{}","page":"API Reference","title":"DataLinter.printable_version","text":"printable_version()\n\nReturns a pretty version string that includes the git commit and date.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.version-Tuple{}","page":"API Reference","title":"DataLinter.version","text":"version()\n\nReturns the current DataLinter version using the Project.toml and git. If the Project.toml, git are not available, the version defaults to an empty string.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.LinterCore.applicable-Tuple{Any, Any, Any}","page":"API Reference","title":"DataLinter.LinterCore.applicable","text":"Function that checks whether a linter is applicable or not. The logic is that the iterable type must match and if linter.linting_ctx==true then a linting context must exist, either specified in the config, through the presence of code or both.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.LinterCore.build_linting_context-Tuple{Any}","page":"API Reference","title":"DataLinter.LinterCore.build_linting_context","text":"Function that builds a LintingContext from a linter configuration\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.LinterCore.build_linting_context-Tuple{String, DataLinter.LinterCore.Linter}","page":"API Reference","title":"DataLinter.LinterCore.build_linting_context","text":"Function that builds a LintingContext from code and code query\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.LinterCore.lint-Tuple{AbstractDataContext, Union{Nothing, DataLinter.LinterCore.AbstractKnowledgeBase}}","page":"API Reference","title":"DataLinter.LinterCore.lint","text":"lint(data_ctx::AbstractDataContext, kb::Union{Nothing, AbstractKnowledgeBase}; config=nothing, debug=false, linters=[\"all\"])\n\nMain linting function. Lints the data provided by data_ctx using knowledge from kb. A configuration for the available linters can be provided in config. If debug=true, performance information for each linter are shown. By default, all available linters will be used.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.LinterCore.reconcile_contexts-Tuple{DataLinter.LinterCore.LintingContext, DataLinter.LinterCore.LintingContext}","page":"API Reference","title":"DataLinter.LinterCore.reconcile_contexts","text":"reconcile_contexts(code_ctx, config_ctx)\n\nFunction that reconciles contexts obtained from code and configuration .toml file. The basic approach is to take all available data from code_ctx and when not available fill in from config_ctx.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.LinterCore.get_experiment_parameters-Tuple{Nothing}","page":"API Reference","title":"DataLinter.LinterCore.get_experiment_parameters","text":"Function that reads linter configuration parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.LinterCore.get_linter_kwargs-Tuple{Nothing, Any}","page":"API Reference","title":"DataLinter.LinterCore.get_linter_kwargs","text":"Function that reads linter configuration parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.LinterCore.linter_is_enabled-Tuple{Nothing, Any}","page":"API Reference","title":"DataLinter.LinterCore.linter_is_enabled","text":"Function that returns whether a linter is enabled in the config or not.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.LinterCore.load_config-Tuple{Nothing}","page":"API Reference","title":"DataLinter.LinterCore.load_config","text":"load_config(configpath::AbstractString)\n\nLoads a linting configuration file located at configpath. The configuration file contains options regarding which linters are enabled and linter parameter values.\n\nExamples\n\njulia> using DataLinter\n       using Pkg\n        configpath = joinpath(dirname((Pkg.project()).path), \"config\", \"default.toml\")\n       DataLinter.LinterCore.load_config(configpath)\nDict{String, Any} with 2 entries:\n  \"parameters\" => Dict{String, Any}(\"uncommon_signs\"=>Dict{String, Any}(), \"enum_detector\"=>Dict{String, Any}(\"distinct_max_limit\"=>5, \"distinct_ratio\"=>0.001), \"empty_example\"=>Dict{String, Any}(), \"negative_…\n  \"linters\"    => Dict{String, Any}(\"uncommon_signs\"=>true, \"enum_detector\"=>true, \"empty_example\"=>true, \"negative_values\"=>true, \"tokenizable_string\"=>true, \"number_as_string\"=>true, \"int_as_float\"=>true, \"l…\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.DataInterface.build_data_context-Tuple{}","page":"API Reference","title":"DataLinter.DataInterface.build_data_context","text":"build_data_context(;data=nothing, code=nothing)\n\nBuilds a data context object using data and code if available. The data context represents a context in which the linter runs: the data it lints and optionally, the code associated to the data i.e. some algorithm that will be applied on that data.\n\nExamples\n\njulia> using DataLinter\n       ncols, nrows = 3, 10\n       data = [rand(nrows) for _ in 1:ncols]\n       ctx = DataLinter.build_data_context(data)\nSimpleDataContext 0.00040435791015625 MB of data\n\njulia> kb = DataLinter.kb_load(\"\")\n       DataLinter.LinterCore.lint(ctx, kb)\n38-element Vector{Pair{Tuple{DataLinter.LinterCore.Linter, String}, Union{Nothing, Bool}}}:\n         (Linter (name=datetime_as_string, f=is_datetime_as_string), \"column: x2\") => nothing\n         (Linter (name=datetime_as_string, f=is_datetime_as_string), \"column: x3\") => nothing\n         (Linter (name=datetime_as_string, f=is_datetime_as_string), \"column: x1\") => nothing\n         (Linter (name=tokenizable_string, f=is_tokenizable_string), \"column: x2\") => nothing\n         ...\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.LinterCore.build_data_iterator-Tuple{Tables.Columns}","page":"API Reference","title":"DataLinter.LinterCore.build_data_iterator","text":"Function that returns a DataStructure ammendable for use in the data linters. It contains a row iterator, a column iterator, metadata\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.KnowledgeBaseInterface.kb_load","page":"API Reference","title":"DataLinter.KnowledgeBaseInterface.kb_load","text":"Loads a knowledge base.\n\n\n\n\n\n","category":"function"},{"location":"api/#DataLinter.KnowledgeBaseInterface.kb_query","page":"API Reference","title":"DataLinter.KnowledgeBaseInterface.kb_query","text":"Runs a query over a knowledge base.\n\n\n\n\n\n","category":"function"},{"location":"api/#DataLinter.OutputInterface.WARN_LEVEL_TO_NUM","page":"API Reference","title":"DataLinter.OutputInterface.WARN_LEVEL_TO_NUM","text":"Structure that maps a warning level to a numeric value. This can be used to obtain an numeric estimate of the issues over a dataset.\n\n\n\n\n\n","category":"constant"},{"location":"api/#DataLinter.LinterCore.process_output-Tuple{Any}","page":"API Reference","title":"DataLinter.LinterCore.process_output","text":"process_output(lintout; buffer=stdout, show_stats=false, show_passing=false, show_na=false)\n\nProcess linting output for display. The function takes the linter output lintout and prints lints to buffer. If show_stats, show_passing and show_na are set to true, the function will print statistics over the checks, the checks that passes and the ones that could not be applied respectively.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataLinter.OutputInterface.score-Tuple{Any}","page":"API Reference","title":"DataLinter.OutputInterface.score","text":"Returns a score corresponding to the severity of the issues found in the dataset. The score is based on the WARN_LEVEL_TO_NUM mapping.\n\n\n\n\n\n","category":"method"},{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"examples/#Usage-examples","page":"Usage examples","title":"Usage examples","text":"","category":"section"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"The linter comes in two flavours, as a CLI utility and a server. Each serves a different purpose: the CLI utility is best suited for linting data outside an experimental environment and builds its linting context only from the configuration file. The server version builds the context from both configuration file and code provided along with the data and is best suited for online interactive eviroments, where code is readily available with the data to be linted.","category":"page"},{"location":"examples/#Running-the-Docker-container","page":"Usage examples","title":"Running the Docker container","text":"","category":"section"},{"location":"examples/#Quick-test","page":"Usage examples","title":"Quick test","text":"","category":"section"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"The Docker container contains compiled versions of the CLI utility and server. To test them, run","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"$ docker run -it --rm \\\n    ghcr.io/zgornel/datalinter-compiled:latest \\\n        /datalinter/bin/datalinter --help","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"and","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"$ docker run -it --rm \\\n    ghcr.io/zgornel/datalinter-compiled:latest \\\n        /datalinterserver/datalinterserver --help","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"respectively.","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"Note: Before running the linter, make sure that the Docker container has mapped all the relevant directories. Check out the Dockerfile of the image to see what directories are available inside the container (created with the mkdir -p commands).","category":"page"},{"location":"examples/#CLI-based-linting","page":"Usage examples","title":"CLI-based linting","text":"","category":"section"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"The CLI-based linter is useful when linting data with no context or in contexts that can be described easily with simple options i.e. type of experiment, target columns, data columns. To lint a test dataset with no context, run the following command in the root of the repository:","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"$ time docker run -it --rm \\\n    --volume=./test/data:/_data \\\n    ghcr.io/zgornel/datalinter-compiled:latest \\\n        /datalinter/bin/datalinter \\\n            /_data/data.csv \\\n            --progress \\\n            --timed \\\n            --print-exceptions \\\n            --log-level error","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"The output should look something like:","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"× important     (empty_example)         row: 9              the example at 'row: 10' looks empty\n× important     (empty_example)         row: 10              the example at 'row: 11' looks empty\n! warning       (large_outliers)        column: x0           the values of 'column: x1' contain large outliers\n! warning       (int_as_float)          column: x3           the values of 'column: x4' are floating point but can be integers\n• info          (tokenizable_string)    column: x5           the values of 'column: x6' could be tokenizable i.e. contain spaces\n• info          (tokenizable_string)    column: x7           the values of 'column: x8' could be tokenizable i.e. contain spaces\n• info          (enum_detector)         column: x4           just a few distinct values in 'column: x5', it could be an enum\n• info          (enum_detector)         column: x7           just a few distinct values in 'column: x8', it could be an enum\n• info          (enum_detector)         column: x3           just a few distinct values in 'column: x4', it could be an enum\n• info          (uncommon_signs)        column: x0           uncommon signs (+/-/NaN/0) present in 'column: x1'\n• info          (long_tailed_distrib)   column: x1           the distribution for 'column: x2' has 'long tails'\n• info          (long_tailed_distrib)   column: x6           the distribution for 'column: x7' has 'long tails'\n• info          (long_tailed_distrib)   column: x2           the distribution for 'column: x3' has 'long tails'\n• info          (long_tailed_distrib)   column: x0           the distribution for 'column: x1' has 'long tails'\n• experimental  (negative_values)       column: x0           found values smaller than 0 in 'column: x1'\n14 issues found from 15 linters applied (14 OK, 1 N/A) .\n  Completed in 0.997672896 seconds, 58.15185546875 MB allocated, 12.4114105% gc time\n  docker run -it --rm --volume=./test/data:/_data --volume=./config:/_config     -1.00s user 0.02s system 0% cpu 3.684 total","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"The following lint uses a configuration file where the some context is provided as well:","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"$ time docker run -it --rm \\\n    --volume=./test/data:/_data \\\n    --volume=./config:/_config \\\n        ghcr.io/zgornel/datalinter-compiled:latest \\\n            /datalinter/bin/datalinter /_data/imbalanced_data.csv \\\n            --config-path /_config/imbalanced_data.toml \\\n            --log-level warn","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"which outputs,","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"! warning       (large_outliers)        column: col3         the values of 'column: col4' contain large outliers\n! warning       (int_as_float)          column: col3         the values of 'column: col4' are floating point but can be integers\n• info          (enum_detector)         column: col3         just a few distinct values in 'column: col4', it could be an enum\n• info          (uncommon_signs)        column: col3         uncommon signs (+/-/NaN/0) present in 'column: col4'\n• info          (long_tailed_distrib)   column: col3         the distribution for 'column: col4' has 'long tails'\n• experimental  (imbalanced_target_variable)    dataset              Imbalanced target column in 'dataset'\n5 issues found from 17 linters applied (12 OK, 5 N/A) .\ndocker run -it --rm --volume=./test/data:/_data --volume=./config:/_config     -1.02s user 0.02s system 0% cpu 3.883 total","category":"page"},{"location":"examples/#Server-based-linting","page":"Usage examples","title":"Server-based linting","text":"","category":"section"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"The server version of the linter is useful for integration with editors and other third party apps that can integrate outputs from a remote linter. To start the linting server and listen on address 0.0.0.0 and port 10000 one can run","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"$ docker run -it --rm -p10000:10000\\\n    ghcr.io/zgornel/datalinter-compiled:alpine\\\n        /datalinterserver/bin/datalinterserver\\\n            -i 0.0.0.0\\\n            --config-path /datalinter/config/r_glmmTMB_imbalanced_data.toml\\\n            --log-level debug","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"Upon starting, the server outputs:","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":" Warning: KB file not correctly specified, defaults will be used.\n └ @ datalinterserver /DataLinter/apps/datalinterserver/src/datalinterserver.jl:83\n [ Info: • Data linting server online @0.0.0.0:10000...\n [ Info: Listening on: 0.0.0.0:10000, thread id: 1","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"The server accepts HTTP requests with a specific JSON payload containing data or, data and code. Upon receiving a request, it will try to run the linter and return a JSON with the output. A client script can be found in scripts/client.jl. The following command sets up a temporary environment for the script to run:","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"$ julia --project=@datalinter -e 'using Pkg; Pkg.add([\"HTTP\", \"JSON\", \"DelimitedFiles\"])'","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"Running the client script with data and code arguments","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"$ julia --project=@datalinter ./scripts/client.jl ./data/imbalanced_data.csv ./test/code/r_snippet_binomial.r","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"outputs:","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"--- Code:\npath <- \"./data.csv\"\nout0 <- loaded_data(path)\nout1 <- glmmTMB(col4 ~ col1 + col2 + col3,\n                data = out0,\n                family = binomial(link = \"linear\"))  # raises linter error\n\n--- Linting output (HTTP Status: 200):\n• n/a           (imbalanced_target_variable)    dataset              linter not applicable (or failed) for 'dataset'\n• experimental  (R_glmmTMB_target_variable)     dataset              Imbalanced dependent variable (glmmTMB)\n• experimental  (R_glmmTMB_binomial_modelling)  dataset              Incorrect binomial data modelling (glmmTMB)\n1 issues found from 3 linters applied (2 OK, 1 N/A) .","category":"page"},{"location":"examples/#Using-the-datalinter.sh-script","page":"Usage examples","title":"Using the datalinter.sh script","text":"","category":"section"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"Note: This option does not support the specification of a config file and will use the default linters and parameter values.","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"The linter can also be run quickly through the datalinter.sh shell script. To run in on the test dataset, one can do:","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"$ ./datalinter.sh ./test/data/data.csv","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"The script can be ran from any directory and accepts a single argument, the dataset that is to be linted.","category":"page"},{"location":"examples/#Running-in-the-Julia-REPL","page":"Usage examples","title":"Running in the Julia REPL","text":"","category":"section"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"First, generate some random data:","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"using DataLinter\n\nncols, nrows = 3, 10\ndata = [rand(nrows) for _ in 1:ncols]","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"then, generate a context object:","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"ctx = DataLinter.build_data_context(data)","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"Context objects are the main linter inputs along with a knowledge base and the config.","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"note: Note\nAt this point the knowledge base is not used.","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"kb = DataLinter.kb_load(\"\")         # raises Warning\nlintout = DataLinter.LinterCore.lint(ctx, kb)\nlintout = DataLinter.LinterCore.lint(ctx, nothing)  # also works","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"Lastly, one can print output of activate linters i.e. the ones that found problems in the data.","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"DataLinter.process_output(lintout)","category":"page"},{"location":"examples/","page":"Usage examples","title":"Usage examples","text":"","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"DataLinter is a library for contextual linting of data and code. The main idea behind the linter is that by providing additional context, more complex issues relating to data and code quality can be detected as issues in data modelling can arise due to both data structure as well as algorithmic or parameter choices. 'Context' here simply means additional information pertinent to the use of the data, available at runtime. For example, the classical way of linting a dataset is without any prior information on what the data will be used for or. Hence, the assumptions about what the data will be used for are implicit. Alternatively, one could provide, for example, the type of analysis or modelling the data is used for i.e. classification or, the code in a given programming language where the data is used. This provides a much higher degree of flexibility in the types of checks that can be implemented.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"DataLinter development started by rewriting Google's data linter project in the Julia language. We aim for a redesign that aims at a richer and faster experience.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"There are several ways to install DataLinter: cloning the Github repository or pulling a Docker image from the Github container registry. Unless one wants to develop DataLinter, the Docker installation is recommended.","category":"page"},{"location":"#Git-cloning","page":"Introduction","title":"Git cloning","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The DataLinter repository can be downloaded through git:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"$ git clone https://github.com/zgornel/DataLinter","category":"page"},{"location":"#Docker-image-(recommended)","page":"Introduction","title":"Docker image (recommended)","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"$ docker pull ghcr.io/zgornel/datalinter-compiled:latest","category":"page"},{"location":"#Architecture-(from-[the-wiki](https://github.com/zgornel/DataLinter/wiki/DataLinter-architecture))","page":"Introduction","title":"Architecture (from the wiki)","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"So far the architecture looks like:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Note:  arrows indicate dependencies and the arrow labels indicate intermediary modules","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Full system: micro-kernel architecture (core system + plugins)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":" graph TD\n    A[data plugin module i.e. **DataCSV**] -- DataInterface --> C[Core System]\n    K[knowledge plugin module i.e. **KnowledgeBaseNative**] -- KnowledgeBaseInterface --> C\n    O[output plugin module] --OutputInterface --> C","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Core System: pipeline architecture","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":" graph LR\n    D[DataInterface] --> L[LinterCore]\n    C[Configuration] --> L\n    K[KnowledgeBaseInterface] --> L\n    O[OutputInterface]-->L","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The modules and corresponding implementations are shown below:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"LinterCore: https://github.com/zgornel/DataLinter/blob/master/src/linter.jl\nConfiguration: https://github.com/zgornel/DataLinter/blob/master/src/config.jl\nDataInterface: https://github.com/zgornel/DataLinter/blob/master/src/data.jl\nDataCSV (plugin): https://github.com/zgornel/DataLinter/blob/master/src/plugins/csv.jl\nKnowledgeBaseInterface: https://github.com/zgornel/DataLinter/blob/master/src/kb.jl\nKnwoledgeBaseNative (plugin): https://github.com/zgornel/DataLinter/blob/master/src/plugins/kb_native.jl\nOutputInterface: https://github.com/zgornel/DataLinter/blob/master/src/output.jl","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"}]
}
